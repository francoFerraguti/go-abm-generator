package generatorComponentJs

import (
	"github.com/francoFerraguti/go-abm-generator/structs"
	"github.com/francoFerraguti/go-abm-generator/templates"
	"github.com/liteByte/frango"
	"strings"
)

func Get(model structs.ModelStruct) string {
	template := templates.ComponentJs()

	fieldsTextValidators := getFieldsTextValidators(model)
	fieldsAssignments := getFieldsAssignments(model)
	fieldsHandleChangeFunctions := getFieldsHandleChangeFunctions(model)
	handleChangeList := getHandleChangeList(model)

	fileContent := strings.Replace(template, "&&COMPONENT_NAME&&", model.Name, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_TEXT_VALIDATORS&&", fieldsTextValidators, -1)
	fileContent = strings.Replace(fileContent, "&&LIST_FIELDS_ASSIGNMENTS&&", fieldsAssignments, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_HANDLE_CHANGE_FUNCTIONS&&", fieldsHandleChangeFunctions, -1)
	fileContent = strings.Replace(fileContent, "&&HANDLE_CHANGE_LIST&&", handleChangeList, -1)

	return fileContent
}

func getHandleChangeList(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += "this._handleChange" + frango.FirstLetterToUpper(field.Name) + " = this._handleChange" + frango.FirstLetterToUpper(field.Name) + ".bind(this);\n"
	}

	return output
}

func getFieldsHandleChangeFunctions(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += "_handleChange" + frango.FirstLetterToUpper(field.Name) + " = (event) => {\n"
		output += "    const target = event.target\n"
		output += "    const value = target.value\n"
		output += "    const name = target.name\n\n"

		switch field.Type {
		case "string":
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": value\n"
			output += "    });\n"
			break
		case "int":
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": parseInt(value)\n"
			output += "    });\n"
			break
		case "float":
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": parseFloat(value)\n"
			output += "    });\n"
			break
		default:
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": value\n"
			output += "    });\n"
			break
		}

		output += "};\n"
	}

	return output
}

func getFieldsAssignments(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += frango.FirstLetterToLower(field.Name) + ": this.state." + frango.FirstLetterToLower(field.Name) + ",\n"
	}

	return output
}

func getFieldsTextValidators(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += "<TextValidator\n"
		output += "    floatingLabelText='" + frango.FirstLetterToUpper(field.Name) + "'\n"
		output += "    onChange={this._handleChange" + frango.FirstLetterToUpper(field.Name) + "}\n"
		output += "    name='" + field.Name + "'\n"
		output += "    value={this.state.form." + field.Name + "}\n"

		if field.Required {
			//output += "    validators={['required']}\n"
			//output += "    errorMessages={['This field is required']}\n"
		}

		output += "/>\n"
	}

	return output
}

/*    _handleChange = (event) => {
      const target = event.target;
      const value = target.value;
      const name = target.name;

      this.setState({
        username: name,
      });
  };*/
