package generatorComponentTableJs

import (
	"github.com/francoFerraguti/go-abm-generator/structs"
	"github.com/francoFerraguti/go-abm-generator/templates"
	"github.com/liteByte/frango"
	"strings"
)

func Get(model structs.ModelStruct) string {
	template := templates.ComponentTableJs()

	fieldsListInitState := getFieldsListInitState(model)
	fieldsListTableHeader := getFieldsListTableHeader(model)
	fieldsParameterList := getFieldsParameterList(model)
	fieldsSetStateList := getFieldsSetStateList(model)
	fieldsTableRows := getFieldsTableRows(model)
	fieldsRowList := getFieldsRowList(model)
	fieldsTextValidators := getFieldsTextValidators(model)
	handleChangeList := getHandleChangeList(model)
	fieldsHandleChangeFunctions := getFieldsHandleChangeFunctions(model)
	fieldsAssignments := getFieldsAssignments(model)

	fileContent := strings.Replace(template, "&&COMPONENT_NAME&&", model.Name, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_LIST_INIT_STATE&&", fieldsListInitState, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_LIST_TABLE_HEADER&&", fieldsListTableHeader, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_PARAMETER_LIST&&", fieldsParameterList, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_SET_STATE_LIST&&", fieldsSetStateList, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_TABLE_ROWS&&", fieldsTableRows, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_ROW_LIST&&", fieldsRowList, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_TEXT_VALIDATORS&&", fieldsTextValidators, -1)
	fileContent = strings.Replace(fileContent, "&&HANDLE_CHANGE_LIST&&", handleChangeList, -1)
	fileContent = strings.Replace(fileContent, "&&FIELDS_HANDLE_CHANGE_FUNCTIONS&&", fieldsHandleChangeFunctions, -1)
	fileContent = strings.Replace(fileContent, "&&LIST_FIELDS_ASSIGNMENTS&&", fieldsAssignments, -1)

	return fileContent
}

func getFieldsAssignments(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += frango.FirstLetterToLower(field.Name) + ": this.state." + frango.FirstLetterToLower(field.Name) + ",\n"
	}

	return output
}

func getFieldsHandleChangeFunctions(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += "_handleChange" + frango.FirstLetterToUpper(field.Name) + " = (event) => {\n"
		output += "    const target = event.target\n"
		output += "    const value = target.value\n"
		output += "    const name = target.name\n\n"

		switch field.Type {
		case "string":
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": value\n"
			output += "    });\n"
			break
		case "int":
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": parseInt(value)\n"
			output += "    });\n"
			break
		case "float":
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": parseFloat(value)\n"
			output += "    });\n"
			break
		default:
			output += "    this.setState({\n"
			output += "        " + frango.FirstLetterToLower(field.Name) + ": value\n"
			output += "    });\n"
			break
		}

		output += "};\n"
	}

	return output
}

func getHandleChangeList(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += "this._handleChange" + frango.FirstLetterToUpper(field.Name) + " = this._handleChange" + frango.FirstLetterToUpper(field.Name) + ".bind(this);\n"
	}

	return output
}

func getFieldsTextValidators(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {

		if field.AutoGenerated {
			continue
		}

		output += "<TextValidator\n"
		output += "    floatingLabelText='" + frango.FirstLetterToUpper(field.Name) + "'\n"
		output += "    onChange={this._handleChange" + frango.FirstLetterToUpper(field.Name) + "}\n"
		output += "    name='" + field.Name + "'\n"
		output += "    value={this.state." + field.Name + "}\n"

		if field.Required {
			output += "    validators={['required']}\n"
			output += "    errorMessages={['This field is required']}\n"
		}

		output += "/>\n"
	}

	return output
}

func getFieldsRowList(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {
		output += "row." + frango.FirstLetterToUpper(field.Name) + ", "
	}

	output = frango.RemoveLastCharacters(output, 2)

	return output
}

func getFieldsTableRows(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {
		output += "<TableRowColumn style={styleRow}>{row." + frango.FirstLetterToUpper(field.Name) + "}</TableRowColumn>\n"
	}

	return output
}

func getFieldsSetStateList(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {
		output += field.Name + ": " + field.Name + model.Name + ",\n"
	}

	return output
}

func getFieldsParameterList(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {
		output += field.Name + model.Name + ", "
	}

	output = frango.RemoveLastCharacters(output, 2)

	return output
}

func getFieldsListTableHeader(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {
		output += "    <TableHeaderColumn style={styleTable}>" + frango.FirstLetterToUpper(field.Name) + "</TableHeaderColumn>\n"
	}

	return output
}

func getFieldsListInitState(model structs.ModelStruct) string {
	output := ""

	for _, field := range model.Fields {
		switch field.Type {
		case "string":
			output += "    " + field.Name + ": '',\n"
			break
		case "bool":
			output += "    " + field.Name + ": false,\n"
			break
		case "int":
			output += "    " + field.Name + ": 0,\n"
			break
		default:
			output += "    " + field.Name + ": '',\n"
			break
		}
	}

	return output
}

//\n
