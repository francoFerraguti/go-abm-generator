package main

import (
	"github.com/liteByte/frango"
	"strconv"
	"strings"
)

func getFileMainGo(projectName string) string {
	return `package main

import (
	"` + projectName + `/dbhandler"
	"` + projectName + `/router"
)

func main() {
	dbhandler.ConnectToDatabase()
	router.ConfigureRouter()
	router.CreateRouter()
	router.RunRouter()
}
	`
}

func getFileConfigGo(projectName string, port string, config ConfigStruct) string {
	return `package config

type Config struct {
	ENV			string
	PORT 		string

	DB_TYPE		string
	DB_USERNAME	string
	DB_PASSWORD	string
	DB_HOST		string
	DB_PORT		string
	DB_NAME 	string
}

var instance *Config

func GetConfig() *Config {
	if instance == nil {
		config := newConfigLocal()
		instance = &config
	}
	return instance
}

func newConfigLocal() Config {
	return Config{
		ENV:			"develop",
		PORT:			"` + port + `",
		DB_TYPE:       	"` + config.DB_TYPE + `",
		DB_USERNAME:    "` + config.DB_USERNAME + `",
		DB_PASSWORD:    "` + config.DB_PASSWORD + `",
		DB_HOST:      	"` + config.DB_HOST + `",
		DB_PORT:       	"` + config.DB_PORT + `",
		DB_NAME:       	"` + config.DB_NAME + `",
	}
}
	`
}

func getFileDBHandlerGo(projectPath string, models []ModelStruct) string {
	schemaString := "func createSchema() {\n"

	for _, model := range models {
		schemaString += "	create" + model.Name + "Table()\n"
	}

	schemaString += "}"

	return `package dbhandler

import (
    "database/sql"
    _ "github.com/go-sql-driver/mysql"

    "github.com/liteByte/frango"
    "` + projectPath + `/config"
)

var db *sql.DB

func ConnectToDatabase() {
    var err error
	
	db, err = sql.Open(config.GetConfig().DB_TYPE, config.GetConfig().DB_USERNAME + ":" + config.GetConfig().DB_PASSWORD + "@tcp(" + config.GetConfig().DB_HOST + ":" + config.GetConfig().DB_PORT + ")/" + config.GetConfig().DB_NAME)
	frango.PrintErr(err)
    
    err = db.Ping()
    frango.PrintErr(err)

    createSchema()
}

func GetDatabase() *sql.DB {
    return db
}

` + schemaString
}

func getFileDBSchemaGo(models []ModelStruct) string {
	schemaString := ""

	for _, model := range models {
		schemaString += "func create" + model.Name + "Table() {\n"
		schemaString += "	query := `CREATE TABLE IF NOT EXISTS " + model.Name + " (\n"

		for i, field := range model.Fields {
			fieldString := field.Name

			max := "255"
			if field.Max != 0 {
				max = strconv.Itoa(field.Max)
			}

			if field.Type == "string" {
				fieldString += " varchar(" + max + ")"
			} else {
				fieldString += " " + field.Type
			}

			if field.Unique {
				fieldString += " UNIQUE"
			}

			if field.Required {
				fieldString += " NOT NULL"
			}

			if field.Default != "" {
				fieldString += " DEFAULT '" + field.Default + "'"
			}

			if field.AutoGenerated && field.Type == "int" {
				fieldString += " AUTO_INCREMENT"
			}

			if i != len(model.Fields)-1 {
				fieldString += ","
			}

			fieldString += "\n"
			schemaString += "		" + fieldString
		}
		schemaString += "	);`\n"
		schemaString += "	_, err := db.Exec(query)\n"
		schemaString += "	frango.PrintErr(err)\n"
		schemaString += "}\n\n"
	}

	return `package dbhandler

import (
    "github.com/liteByte/frango"
)

` + schemaString
}

func getFileStructsGo(projectName string, models []ModelStruct) string {
	structsString := ""
	for _, model := range models {
		structsString += "type " + model.Name + "Struct struct {\n"
		for _, field := range model.Fields {
			structsString += "	" + frango.FirstLetterToUpper(field.Name) + " " + field.Type + "\n"
		}
		structsString += "}\n\n"

		structsString += "func ParseBodyInto" + model.Name + "Struct(body io.ReadCloser) (" + model.Name + "Struct, error) {\n"
		structsString += "    bodyBytes, _ := ioutil.ReadAll(body)\n"
		structsString += "    " + frango.FirstLetterToLower(model.Name) + "Struct := " + model.Name + "Struct{}\n"
		structsString += "    err := json.Unmarshal(bodyBytes, &" + frango.FirstLetterToLower(model.Name) + "Struct)\n"
		structsString += "    return " + frango.FirstLetterToLower(model.Name) + "Struct, err\n"
		structsString += "}\n\n"
	}

	return `package structs

import (
	"encoding/json"
	"io"
	"io/ioutil"
)

` + structsString
}

func getFileRouterGo(projectName string, models []ModelStruct) string {
	importString := ""
	endpointsString := ""

	for _, model := range models {
		importString += "	`" + projectName + "/controllers/" + frango.FirstLetterToLower(model.Name) + "`\n"

		endpointsString += "		api.POST(`/" + frango.FirstLetterToLower(model.Name) + "`, " + frango.FirstLetterToLower(model.Name) + ".Create)\n"

		for _, field := range model.Fields {
			if !field.Unique {
				continue
			}

			endpointsString += "		api.GET(`/" + frango.FirstLetterToLower(model.Name) + "/" + frango.FirstLetterToLower(field.Name) + "/:" + frango.FirstLetterToLower(field.Name) + "`, " + frango.FirstLetterToLower(model.Name) + ".GetBy" + frango.FirstLetterToUpper(field.Name) + ")\n"
			endpointsString += "		api.PUT(`/" + frango.FirstLetterToLower(model.Name) + "/" + frango.FirstLetterToLower(field.Name) + "/:" + frango.FirstLetterToLower(field.Name) + "`, " + frango.FirstLetterToLower(model.Name) + ".UpdateBy" + frango.FirstLetterToUpper(field.Name) + ")\n"
			endpointsString += "		api.DELETE(`/" + frango.FirstLetterToLower(model.Name) + "/" + frango.FirstLetterToLower(field.Name) + "/:" + frango.FirstLetterToLower(field.Name) + "`, " + frango.FirstLetterToLower(model.Name) + ".DeleteBy" + frango.FirstLetterToUpper(field.Name) + ")\n"
		}
	}

	return `package router

import (
	"github.com/gin-gonic/gin"
	"` + projectName + `/config"
` + importString + `)

var router *gin.Engine

func ConfigureRouter() {
	if config.GetConfig().ENV != "develop" {
		gin.SetMode(gin.ReleaseMode)
	}
}

func CreateRouter() {
	router = gin.New()

	api := router.Group("/")
	{
` + endpointsString + `    }
}

func RunRouter() {
	router.Run(":" + config.GetConfig().PORT)
}
`
}

func getFileModelGo(projectName string, model ModelStruct) string {
	getByString := ""
	deleteByString := ""
	updateByString := ""

	for _, field := range model.Fields {
		if !field.Unique {
			continue
		}

		updateByString += modelUpdateBy(model, field)
		getByString += modelGetBy(model, field)
		deleteByString += modelDeleteBy(model, field)
	}

	return `package ` + strings.ToLower(model.Name) + `

import (
	"` + projectName + `/dbhandler"
    "` + projectName + `/structs"
)

` + modelCreate(model) + updateByString + getByString + deleteByString
}

func getFileControllerGo(projectName string, model ModelStruct) string {
	getByString := ""
	deleteByString := ""
	updateByString := ""
	frangoImport := ""

	for _, field := range model.Fields {
		if field.Type != "string" && field.Unique {
			frangoImport = "	\n`github.com/liteByte/frango`\n"
		}

		if !field.Unique {
			continue
		}

		updateByString += controllerUpdateBy(model, field)
		getByString += controllerGetBy(model, field)
		deleteByString += controllerDeleteBy(model, field)
	}

	return `package ` + strings.ToLower(model.Name) + `

import (
	"encoding/json"` + frangoImport + `
	"` + projectName + `/models/` + strings.ToLower(model.Name) + `"
    "` + projectName + `/structs"
	"github.com/gin-gonic/gin"
)

` + controllerCreate(model) + updateByString + getByString + deleteByString
}
